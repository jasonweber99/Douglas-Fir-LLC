<h1>Map Options</h1>
<h2>Option 1: Google Maps Platform</h2>
<h3>Summary</h3>
<p>Google maps is the first choice that comes to mind when considering adding a map in any context. Using the <a href="https://developers.google.com/maps/documentation/javascript/overview">Maps JavaScript API</a>, we are able to include a google map on our website that may be loaded by a JavaScript function after a page loads. To display a custom marker like a business on our Google map, we must first geocode our address into geographic coordinates (latitude and longitude). To reduce API calls (and therefore cost), we may save the geocoded coordinates in our database, only calling the API when an address is created or changed. The Google Maps Platform offers a <a href="https://developers.google.com/maps/documentation/geocoding/overview">Geocoding API</a> which we may use to accomplish this task. The Google Maps JavaScript API also features a <a href="https://developers.google.com/maps/documentation/javascript/directions">Directions</a> service which allows for the rendering of routes between two or more points.</p>

<h3>Pricing</h3>
<p>Pricing is where the Google Maps Platform falls short. Instead of offering a free tier, Google opts for the free credit approach. Each month the Google Maps Platform offers $200 of free usage for its APIs. Unfortunately, the pricing of its APIs are quite high. To display a dynamic map (one capable of displaying our businesses), we are charged $7 per 1,000 requests. Additionally, rendering routes charges an additional $5 per request. Lastly, geocoding costs another $5 per 1,000 request. Since geocoding will only happen when creating or updating an address, it will not meaningfully contribute to the total monthly cost. The map and route displaying on the other hand, have the potential to add up and pass the $200 free credit incredibly quickly if there is ever a local event which brings increased traffic to the site.</p>

<h3>Example</h3>
<p>A screenshot of a map generated by the Maps JavaScript API</p>
<img src="~/assets/GMExample.jpg" alt="A screenshot of a map generated by the Maps JavaScript API" />


<h2>Option 2: Leaflet JS with OpenStreetMap Data</h2>
<h3>Summary</h3>
<p>Leaflet JS is a lightweight, open source JavaScript library used to generate maps that look incredibly similar to Google's maps. The Leaflet API <a href="https://leafletjs.com/reference-1.7.1.html#tilelayer">loads map data</a>, like that of <a href="https://www.openstreetmap.org/export">OpenStreetMap</a> (OSM). While many tile server APIs exist, we cannot confidently guaruntee that we will not exceed our usage quota and incur charges. Instead, we may download local map data from OSM as an XML file. From here, we may use an <a href="https://github.com/openstreetmap/leaflet-osm">open source Leaflet plugin</a> to convert our OSM XML data to map tiles which Leaflet can then use to display our map. To check for map changes, we may have our server re-download map data after a certain timebox has expired. Additionally, Leaflet has plugins which can be used for routing between locations.</p>

<h3>Pricing</h3>
When downloading our OSM data ourselves instead of using a tile API, this implementation is comletely free. Since it is completely free and offers the same functionality as the Google Maps Platform, I recommend using Leaflet JS with OSM data.

<h3>Example</h3>
<p>A screenshot of a Leaflet JS map using OSM data.</p>
<img src="~/assets/LJSExample.jpg" alt="A screenshot of a Leaflet JS map using OSM data." />